<?php

namespace Proxies\__CG__\Application\Sonata\NewsBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Post extends \Application\Sonata\NewsBundle\Entity\Post implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setAbstract($abstract)
    {
        $this->__load();
        return parent::setAbstract($abstract);
    }

    public function getAbstract()
    {
        $this->__load();
        return parent::getAbstract();
    }

    public function setContent($content)
    {
        $this->__load();
        return parent::setContent($content);
    }

    public function getContent()
    {
        $this->__load();
        return parent::getContent();
    }

    public function setEnabled($enabled)
    {
        $this->__load();
        return parent::setEnabled($enabled);
    }

    public function getEnabled()
    {
        $this->__load();
        return parent::getEnabled();
    }

    public function setSlug($slug)
    {
        $this->__load();
        return parent::setSlug($slug);
    }

    public function getSlug()
    {
        $this->__load();
        return parent::getSlug();
    }

    public function setPublicationDateStart(\DateTime $publicationDateStart = NULL)
    {
        $this->__load();
        return parent::setPublicationDateStart($publicationDateStart);
    }

    public function getPublicationDateStart()
    {
        $this->__load();
        return parent::getPublicationDateStart();
    }

    public function setCreatedAt(\DateTime $createdAt = NULL)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setUpdatedAt(\DateTime $updatedAt = NULL)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }

    public function addComments(\Sonata\NewsBundle\Model\CommentInterface $comment)
    {
        $this->__load();
        return parent::addComments($comment);
    }

    public function setComments($comments)
    {
        $this->__load();
        return parent::setComments($comments);
    }

    public function getComments()
    {
        $this->__load();
        return parent::getComments();
    }

    public function addTags(\Sonata\NewsBundle\Model\TagInterface $tags)
    {
        $this->__load();
        return parent::addTags($tags);
    }

    public function getTags()
    {
        $this->__load();
        return parent::getTags();
    }

    public function setTags($tags)
    {
        $this->__load();
        return parent::setTags($tags);
    }

    public function prePersist()
    {
        $this->__load();
        return parent::prePersist();
    }

    public function preUpdate()
    {
        $this->__load();
        return parent::preUpdate();
    }

    public function getYear()
    {
        $this->__load();
        return parent::getYear();
    }

    public function getMonth()
    {
        $this->__load();
        return parent::getMonth();
    }

    public function getDay()
    {
        $this->__load();
        return parent::getDay();
    }

    public function setCommentsEnabled($commentsEnabled)
    {
        $this->__load();
        return parent::setCommentsEnabled($commentsEnabled);
    }

    public function getCommentsEnabled()
    {
        $this->__load();
        return parent::getCommentsEnabled();
    }

    public function setCommentsCloseAt(\DateTime $commentsCloseAt = NULL)
    {
        $this->__load();
        return parent::setCommentsCloseAt($commentsCloseAt);
    }

    public function getCommentsCloseAt()
    {
        $this->__load();
        return parent::getCommentsCloseAt();
    }

    public function setCommentsDefaultStatus($commentsDefaultStatus)
    {
        $this->__load();
        return parent::setCommentsDefaultStatus($commentsDefaultStatus);
    }

    public function getCommentsDefaultStatus()
    {
        $this->__load();
        return parent::getCommentsDefaultStatus();
    }

    public function setCommentsCount($commentsCount)
    {
        $this->__load();
        return parent::setCommentsCount($commentsCount);
    }

    public function getCommentsCount()
    {
        $this->__load();
        return parent::getCommentsCount();
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function isCommentable()
    {
        $this->__load();
        return parent::isCommentable();
    }

    public function isPublic()
    {
        $this->__load();
        return parent::isPublic();
    }

    public function setAuthor($author)
    {
        $this->__load();
        return parent::setAuthor($author);
    }

    public function getAuthor()
    {
        $this->__load();
        return parent::getAuthor();
    }

    public function setCategory(\Sonata\NewsBundle\Model\CategoryInterface $category = NULL)
    {
        $this->__load();
        return parent::setCategory($category);
    }

    public function getCategory()
    {
        $this->__load();
        return parent::getCategory();
    }

    public function setContentFormatter($contentFormatter)
    {
        $this->__load();
        return parent::setContentFormatter($contentFormatter);
    }

    public function getContentFormatter()
    {
        $this->__load();
        return parent::getContentFormatter();
    }

    public function setRawContent($rawContent)
    {
        $this->__load();
        return parent::setRawContent($rawContent);
    }

    public function getRawContent()
    {
        $this->__load();
        return parent::getRawContent();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'title', 'abstract', 'content', 'rawContent', 'contentFormatter', 'enabled', 'slug', 'publicationDateStart', 'commentsEnabled', 'commentsCloseAt', 'commentsDefaultStatus', 'commentsCount', 'createdAt', 'updatedAt', 'id', 'comments', 'image', 'author', 'category', 'tags');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}